import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtCellink.Node 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component { name: "AbstractOpacityDelegate"; prototype: "NodeDelegate" }
    Component { name: "AbstractRectDelegate"; prototype: "NodeDelegate" }
    Component { name: "AbstractTextDelegate"; prototype: "NodeDelegate" }
    Component {
        name: "HeaderDelegate"
        prototype: "TextDelegate"
        exports: ["QtCellink.Node/HeaderDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "orientation"; type: "Qt::Orientation" }
    }
    Component {
        name: "NodeDelegate"
        prototype: "QObject"
        Signal { name: "changed" }
    }
    Component {
        name: "NodeItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtCellink.Node/NodeItem 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SelectionMode"
            values: {
                "NoSelection": 0,
                "SingleSelection": 1,
                "MultiSelection": 2
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "rows"; type: "int" }
        Property { name: "columns"; type: "int" }
        Property { name: "selection"; type: "QRect"; isReadonly: true }
        Property { name: "model"; type: "QObject"; isPointer: true }
        Property { name: "selectionMode"; type: "SelectionMode" }
        Property { name: "selectionModel"; type: "QItemSelectionModel"; isPointer: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "selecting"; type: "bool"; isReadonly: true }
        Property { name: "nodeWidth"; type: "double" }
        Property { name: "nodeHeight"; type: "double" }
        Property { name: "nodeSpacing"; type: "double" }
        Property { name: "nodeScaleX"; type: "double" }
        Property { name: "nodeScaleY"; type: "double" }
        Property { name: "delegates"; type: "NodeDelegate"; isList: true; isReadonly: true }
        Signal {
            name: "pressed"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "released"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "activated"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "clicked"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "ensureVisible"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method { name: "selectAll" }
        Method {
            name: "select"
            Parameter { name: "selection"; type: "QRect" }
        }
        Method { name: "clearSelection" }
        Method { name: "cancelSelection" }
    }
    Component {
        name: "NodeView"
        defaultProperty: "flickableData"
        prototype: "QQuickFlickable"
        exports: ["QtCellink.Node/NodeView 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SelectionMode"
            values: {
                "NoSelection": 0,
                "SingleSelection": 1,
                "MultiSelection": 2
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "rows"; type: "int" }
        Property { name: "columns"; type: "int" }
        Property { name: "model"; type: "QObject"; isPointer: true }
        Property { name: "selection"; type: "QRect"; isReadonly: true }
        Property { name: "selectionMode"; type: "SelectionMode" }
        Property { name: "selectionModel"; type: "QItemSelectionModel"; isPointer: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "selecting"; type: "bool"; isReadonly: true }
        Property { name: "nodeWidth"; type: "double" }
        Property { name: "nodeHeight"; type: "double" }
        Property { name: "nodeSpacing"; type: "double" }
        Property { name: "nodeScaleX"; type: "double" }
        Property { name: "nodeScaleY"; type: "double" }
        Property { name: "delegates"; type: "NodeDelegate"; isList: true; isReadonly: true }
        Property { name: "zoomFactor"; type: "double"; isReadonly: true }
        Property { name: "zoomPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "minimumZoomFactor"; type: "double" }
        Property { name: "maximumZoomFactor"; type: "double" }
        Property { name: "nodeItem"; type: "NodeItem"; isPointer: true }
        Signal {
            name: "clicked"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Signal {
            name: "zoomChanged"
            Parameter { name: "factor"; type: "double" }
            Parameter { name: "point"; type: "QPointF" }
        }
        Method { name: "selectAll" }
        Method {
            name: "select"
            Parameter { name: "selection"; type: "QRect" }
        }
        Method { name: "clearSelection" }
        Method { name: "cancelSelection" }
        Method {
            name: "ensureVisible"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "zoom"
            Parameter { name: "factor"; type: "double" }
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "zoomIn"
            Parameter { name: "factor"; type: "double" }
        }
        Method { name: "zoomIn" }
        Method {
            name: "zoomOut"
            Parameter { name: "factor"; type: "double" }
        }
        Method { name: "zoomOut" }
    }
    Component {
        name: "OpacityDelegate"
        prototype: "AbstractOpacityDelegate"
        exports: ["QtCellink.Node/OpacityDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "opacityRole"; type: "int" }
    }
    Component {
        name: "ProgressDelegate"
        prototype: "RectDelegate"
        exports: ["QtCellink.Node/ProgressDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "progressRole"; type: "int" }
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "layoutDirection"; type: "Qt::LayoutDirection" }
    }
    Component {
        name: "RectDelegate"
        prototype: "AbstractRectDelegate"
        exports: ["QtCellink.Node/RectDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "radius"; type: "double" }
        Property { name: "color"; type: "QColor" }
        Property { name: "currentColor"; type: "QColor" }
        Property { name: "selectedColor"; type: "QColor" }
        Property { name: "disabledColor"; type: "QColor" }
        Property { name: "borderWidth"; type: "double" }
        Property { name: "currentBorderWidth"; type: "double" }
        Property { name: "selectedBorderWidth"; type: "double" }
        Property { name: "disabledBorderWidth"; type: "double" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "currentBorderColor"; type: "QColor" }
        Property { name: "selectedBorderColor"; type: "QColor" }
        Property { name: "disabledBorderColor"; type: "QColor" }
    }
    Component {
        name: "TextDelegate"
        prototype: "AbstractTextDelegate"
        exports: ["QtCellink.Node/TextDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "textRole"; type: "int" }
        Property { name: "color"; type: "QColor" }
        Property { name: "currentColor"; type: "QColor" }
        Property { name: "selectedColor"; type: "QColor" }
        Property { name: "disabledColor"; type: "QColor" }
        Property { name: "font"; type: "QFont" }
        Property { name: "alignment"; type: "Qt::Alignment" }
    }
}
