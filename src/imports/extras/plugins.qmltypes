import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtCellink.Extras 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Color"
        prototype: "QObject"
        exports: ["QtCellink.Extras/Color 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "transparent"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "opacity"; type: "double" }
        }
        Method {
            name: "blend"
            type: "QColor"
            Parameter { name: "a"; type: "QColor" }
            Parameter { name: "b"; type: "QColor" }
            Parameter { name: "factor"; type: "double" }
        }
        Method {
            name: "hue"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "factor"; type: "double" }
        }
    }
    Component {
        name: "ColorImage"
        defaultProperty: "data"
        prototype: "QQuickImage"
        exports: ["QtCellink.Extras/ColorImage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "defaultColor"; type: "QColor" }
    }
    Component {
        name: "FilterModel"
        prototype: "QSortFilterProxyModel"
        exports: ["QtCellink.Extras/FilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FilterRule"
            values: {
                "EqualTo": 0,
                "LessThan": 1,
                "GreaterThan": 2,
                "NotEqualTo": 3
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "source"; type: "QObject"; isPointer: true }
        Property { name: "filterValue"; type: "QVariant" }
        Property { name: "filterRule"; type: "FilterRule" }
        Method {
            name: "get"
            type: "QJSValue"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "mapToSourceRow"
            type: "int"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "mapFromSourceRow"
            type: "int"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "IconImage"
        defaultProperty: "data"
        prototype: "QQuickImage"
        exports: ["QtCellink.Extras/IconImage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "color"; type: "QColor" }
    }
    Component {
        name: "IconLabel"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtCellink.Extras/IconLabel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Display"
            values: {
                "IconOnly": 0,
                "TextOnly": 1,
                "TextBesideIcon": 2,
                "TextUnderIcon": 3
            }
        }
        Property { name: "icon"; type: "QQuickIcon" }
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "color"; type: "QColor" }
        Property { name: "display"; type: "Display" }
        Property { name: "spacing"; type: "double" }
        Property { name: "mirrored"; type: "bool" }
        Property { name: "alignment"; type: "Qt::Alignment" }
        Property { name: "topPadding"; type: "double" }
        Property { name: "leftPadding"; type: "double" }
        Property { name: "rightPadding"; type: "double" }
        Property { name: "bottomPadding"; type: "double" }
    }
    Component {
        name: "Keyboard"
        prototype: "QObject"
        exports: ["QtCellink.Extras/Keyboard 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method { name: "modifiers"; type: "Qt::KeyboardModifiers" }
    }
    Component {
        name: "MnemonicLabel"
        defaultProperty: "data"
        prototype: "QQuickText"
        exports: ["QtCellink.Extras/MnemonicLabel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "mnemonicVisible"; type: "bool" }
    }
    Component {
        name: "PaddedRectangle"
        defaultProperty: "data"
        prototype: "QQuickRectangle"
        exports: ["QtCellink.Extras/PaddedRectangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "padding"; type: "double" }
        Property { name: "topPadding"; type: "double" }
        Property { name: "leftPadding"; type: "double" }
        Property { name: "rightPadding"; type: "double" }
        Property { name: "bottomPadding"; type: "double" }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterRegularExpression"; type: "QRegularExpression" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Property { name: "recursiveFilteringEnabled"; type: "bool" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "regExp"; type: "QRegExp" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "regularExpression"; type: "QRegularExpression" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "Rect"
        prototype: "QObject"
        exports: ["QtCellink.Extras/Rect 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "center"
            type: "QPointF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "topLeft"
            type: "QPointF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "topRight"
            type: "QPointF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "bottomLeft"
            type: "QPointF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "bottomRight"
            type: "QPointF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "adjusted"
            type: "QRectF"
            Parameter { name: "r"; type: "QRectF" }
            Parameter { name: "dx1"; type: "double" }
            Parameter { name: "dy1"; type: "double" }
            Parameter { name: "dx2"; type: "double" }
            Parameter { name: "dy2"; type: "double" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "r"; type: "QRectF" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "r"; type: "QRectF" }
            Parameter { name: "p"; type: "QPointF" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "r1"; type: "QRectF" }
            Parameter { name: "r2"; type: "QRectF" }
        }
        Method {
            name: "intersected"
            type: "QRectF"
            Parameter { name: "r1"; type: "QRectF" }
            Parameter { name: "r2"; type: "QRectF" }
        }
        Method {
            name: "intersects"
            type: "bool"
            Parameter { name: "r1"; type: "QRectF" }
            Parameter { name: "r2"; type: "QRectF" }
        }
        Method {
            name: "isEmpty"
            type: "bool"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "isNull"
            type: "bool"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "isValid"
            type: "bool"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "normalized"
            type: "QRectF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "size"
            type: "QSizeF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "toAlignedRect"
            type: "QRectF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "toRect"
            type: "QRectF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "translated"
            type: "QRectF"
            Parameter { name: "r"; type: "QRectF" }
            Parameter { name: "dx"; type: "double" }
            Parameter { name: "dy"; type: "double" }
        }
        Method {
            name: "translated"
            type: "QRectF"
            Parameter { name: "r"; type: "QRectF" }
            Parameter { name: "offset"; type: "QPointF" }
        }
        Method {
            name: "transposed"
            type: "QRectF"
            Parameter { name: "r"; type: "QRectF" }
        }
        Method {
            name: "united"
            type: "QRectF"
            Parameter { name: "r1"; type: "QRectF" }
            Parameter { name: "r2"; type: "QRectF" }
        }
    }
}
