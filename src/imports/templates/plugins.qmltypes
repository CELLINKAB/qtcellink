import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtCellink.Templates 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "ButtonRow"
        defaultProperty: "contentData"
        prototype: "QQuickContainer"
        exports: ["QtCellink.Templates/ButtonRow 1.0"]
        exportMetaObjectRevisions: [0]
        attachedType: "ButtonRowAttached"
        Property { name: "exclusive"; type: "bool" }
        Signal {
            name: "activated"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "ButtonRowAttached"
        prototype: "QObject"
        Property { name: "index"; type: "int"; isReadonly: true }
        Property { name: "isLastItem"; type: "bool"; isReadonly: true }
        Property { name: "isFirstItem"; type: "bool"; isReadonly: true }
        Property { name: "buttonRow"; type: "ButtonRow"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "ComponentView"
        defaultProperty: "components"
        prototype: "QQuickControl"
        exports: ["QtCellink.Templates/ComponentView 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "properties"; type: "QJSValue" }
        Property { name: "components"; type: "QQmlComponent"; isList: true; isReadonly: true }
        Signal {
            name: "init"
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Signal {
            name: "push"
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Signal {
            name: "pop"
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Method { name: "clear" }
        Method {
            name: "componentAt"
            type: "QQmlComponent*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addComponent"
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Method {
            name: "insertComponent"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Method {
            name: "removeComponent"
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Method {
            name: "takeComponent"
            type: "QQmlComponent*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "DoubleSpinBox"
        defaultProperty: "data"
        prototype: "QQuickControl"
        exports: ["QtCellink.Templates/DoubleSpinBox 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "from"; type: "double" }
        Property { name: "to"; type: "double" }
        Property { name: "value"; type: "double" }
        Property { name: "stepSize"; type: "double" }
        Property { name: "pageStepSize"; type: "double" }
        Property { name: "editable"; type: "bool" }
        Property { name: "validator"; type: "QValidator"; isPointer: true }
        Property { name: "textFromValue"; type: "QJSValue" }
        Property { name: "valueFromText"; type: "QJSValue" }
        Property { name: "up"; type: "DoubleSpinButton"; isReadonly: true; isPointer: true }
        Property { name: "down"; type: "DoubleSpinButton"; isReadonly: true; isPointer: true }
        Property { name: "inputMethodHints"; type: "Qt::InputMethodHints" }
        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
        Property { name: "wrap"; type: "bool" }
        Property { name: "displayText"; type: "string" }
        Property { name: "decimals"; type: "int" }
        Property { name: "prefix"; type: "string" }
        Property { name: "suffix"; type: "string" }
        Signal { name: "accepted" }
        Signal { name: "valueModified" }
        Method { name: "increase" }
        Method { name: "decrease" }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "DoubleSpinButton"
        prototype: "QObject"
        Property { name: "pressed"; type: "bool" }
        Property { name: "indicator"; type: "QQuickItem"; isPointer: true }
        Property { name: "hovered"; type: "bool" }
    }
    Component {
        name: "FlipView"
        defaultProperty: "contentData"
        prototype: "QQuickContainer"
        exports: ["QtCellink.Templates/FlipView 1.0"]
        exportMetaObjectRevisions: [0]
        attachedType: "FlipViewAttached"
        Property { name: "angle"; type: "double"; isReadonly: true }
        Property { name: "axis"; type: "Qt::Axis" }
    }
    Component {
        name: "FlipViewAttached"
        prototype: "QObject"
        Property { name: "index"; type: "int"; isReadonly: true }
        Property { name: "view"; type: "FlipView"; isReadonly: true; isPointer: true }
        Property { name: "isCurrentItem"; type: "bool"; isReadonly: true }
        Property { name: "isPreviousItem"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "ProgressIndicator"
        defaultProperty: "data"
        prototype: "QQuickControl"
        exports: ["QtCellink.Templates/ProgressIndicator 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "running"; type: "bool" }
        Property { name: "value"; type: "double" }
        Signal { name: "started" }
        Signal { name: "stopped" }
    }
    Component {
        name: "QQuickAbstractButton"
        defaultProperty: "data"
        prototype: "QQuickControl"
        Enum {
            name: "Display"
            values: {
                "IconOnly": 0,
                "TextOnly": 1,
                "TextBesideIcon": 2,
                "TextUnderIcon": 3
            }
        }
        Property { name: "text"; type: "string" }
        Property { name: "down"; type: "bool" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "checked"; type: "bool" }
        Property { name: "checkable"; type: "bool" }
        Property { name: "autoExclusive"; type: "bool" }
        Property { name: "autoRepeat"; type: "bool" }
        Property { name: "indicator"; type: "QQuickItem"; isPointer: true }
        Property { name: "icon"; revision: 3; type: "QQuickIcon" }
        Property { name: "display"; revision: 3; type: "Display" }
        Property { name: "action"; revision: 3; type: "QQuickAction"; isPointer: true }
        Property { name: "autoRepeatDelay"; revision: 4; type: "int" }
        Property { name: "autoRepeatInterval"; revision: 4; type: "int" }
        Property { name: "pressX"; revision: 4; type: "double"; isReadonly: true }
        Property { name: "pressY"; revision: 4; type: "double"; isReadonly: true }
        Property { name: "implicitIndicatorWidth"; revision: 5; type: "double"; isReadonly: true }
        Property { name: "implicitIndicatorHeight"; revision: 5; type: "double"; isReadonly: true }
        Signal { name: "pressed" }
        Signal { name: "released" }
        Signal { name: "canceled" }
        Signal { name: "clicked" }
        Signal { name: "pressAndHold" }
        Signal { name: "doubleClicked" }
        Signal { name: "toggled"; revision: 2 }
        Signal { name: "iconChanged"; revision: 3 }
        Signal { name: "displayChanged"; revision: 3 }
        Signal { name: "actionChanged"; revision: 3 }
        Signal { name: "autoRepeatDelayChanged"; revision: 4 }
        Signal { name: "autoRepeatIntervalChanged"; revision: 4 }
        Signal { name: "pressXChanged"; revision: 4 }
        Signal { name: "pressYChanged"; revision: 4 }
        Signal { name: "implicitIndicatorWidthChanged"; revision: 5 }
        Signal { name: "implicitIndicatorHeightChanged"; revision: 5 }
        Method { name: "toggle" }
    }
    Component {
        name: "QQuickContainer"
        defaultProperty: "contentData"
        prototype: "QQuickControl"
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "contentModel"; type: "QVariant"; isReadonly: true }
        Property { name: "contentData"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "contentChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "contentWidth"; revision: 5; type: "double" }
        Property { name: "contentHeight"; revision: 5; type: "double" }
        Signal { name: "contentWidthChanged"; revision: 5 }
        Signal { name: "contentHeightChanged"; revision: 5 }
        Method {
            name: "setCurrentIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "incrementCurrentIndex"; revision: 1 }
        Method { name: "decrementCurrentIndex"; revision: 1 }
        Method {
            name: "itemAt"
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "insertItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "moveItem"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
        }
        Method {
            name: "removeItem"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method {
            name: "takeItem"
            revision: 3
            type: "QQuickItem*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QQuickControl"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "font"; type: "QFont" }
        Property { name: "availableWidth"; type: "double"; isReadonly: true }
        Property { name: "availableHeight"; type: "double"; isReadonly: true }
        Property { name: "padding"; type: "double" }
        Property { name: "topPadding"; type: "double" }
        Property { name: "leftPadding"; type: "double" }
        Property { name: "rightPadding"; type: "double" }
        Property { name: "bottomPadding"; type: "double" }
        Property { name: "spacing"; type: "double" }
        Property { name: "locale"; type: "QLocale" }
        Property { name: "mirrored"; type: "bool"; isReadonly: true }
        Property { name: "focusPolicy"; type: "Qt::FocusPolicy" }
        Property { name: "focusReason"; type: "Qt::FocusReason" }
        Property { name: "visualFocus"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "hoverEnabled"; type: "bool" }
        Property { name: "wheelEnabled"; type: "bool" }
        Property { name: "background"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "palette"; revision: 3; type: "QPalette" }
        Property { name: "horizontalPadding"; revision: 5; type: "double" }
        Property { name: "verticalPadding"; revision: 5; type: "double" }
        Property { name: "implicitContentWidth"; revision: 5; type: "double"; isReadonly: true }
        Property { name: "implicitContentHeight"; revision: 5; type: "double"; isReadonly: true }
        Property { name: "implicitBackgroundWidth"; revision: 5; type: "double"; isReadonly: true }
        Property { name: "implicitBackgroundHeight"; revision: 5; type: "double"; isReadonly: true }
        Property { name: "topInset"; revision: 5; type: "double" }
        Property { name: "leftInset"; revision: 5; type: "double" }
        Property { name: "rightInset"; revision: 5; type: "double" }
        Property { name: "bottomInset"; revision: 5; type: "double" }
        Signal { name: "paletteChanged"; revision: 3 }
        Signal { name: "horizontalPaddingChanged"; revision: 5 }
        Signal { name: "verticalPaddingChanged"; revision: 5 }
        Signal { name: "implicitContentWidthChanged"; revision: 5 }
        Signal { name: "implicitContentHeightChanged"; revision: 5 }
        Signal { name: "implicitBackgroundWidthChanged"; revision: 5 }
        Signal { name: "implicitBackgroundHeightChanged"; revision: 5 }
        Signal { name: "topInsetChanged"; revision: 5 }
        Signal { name: "leftInsetChanged"; revision: 5 }
        Signal { name: "rightInsetChanged"; revision: 5 }
        Signal { name: "bottomInsetChanged"; revision: 5 }
    }
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "Flags"
            values: {
                "ItemClipsChildrenToShape": 1,
                "ItemAcceptsInputMethod": 2,
                "ItemIsFocusScope": 4,
                "ItemHasContents": 8,
                "ItemAcceptsDrops": 16
            }
        }
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "containmentMask"; revision: 11; type: "QObject"; isPointer: true }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Signal { name: "containmentMaskChanged"; revision: 11 }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 4
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 4
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapFromGlobal"
            revision: 7
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToGlobal"
            revision: 7
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        name: "RowButton"
        defaultProperty: "data"
        prototype: "QQuickAbstractButton"
        exports: ["QtCellink.Templates/RowButton 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "TitleSeparator"
        defaultProperty: "data"
        prototype: "QQuickControl"
        exports: ["QtCellink.Templates/TitleSeparator 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "title"; type: "string" }
    }
}
